# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ala
else:
    import _ala

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class DataContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ala.delete_DataContainer

    def new_data_container_handle(self):
        return _ala.DataContainer_new_data_container_handle(self)

    def items(self):
        return _ala.DataContainer_items(self)

    def is_complex(self):
        return _ala.DataContainer_is_complex(self)

    def norm(self):
        return _ala.DataContainer_norm(self)

    def dot(self, dc, ptr):
        return _ala.DataContainer_dot(self, dc, ptr)

    def multiply(self, x, y):
        return _ala.DataContainer_multiply(self, x, y)

    def divide(self, x, y):
        return _ala.DataContainer_divide(self, x, y)

    def maximum(self, x, y):
        return _ala.DataContainer_maximum(self, x, y)

    def minimum(self, x, y):
        return _ala.DataContainer_minimum(self, x, y)

    def axpby(self, ptr_a, x, ptr_b, y):
        return _ala.DataContainer_axpby(self, ptr_a, x, ptr_b, y)

    def xapyb(self, *args):
        return _ala.DataContainer_xapyb(self, *args)

    def write(self, filename):
        return _ala.DataContainer_write(self, filename)

    def is_empty(self):
        return _ala.DataContainer_is_empty(self)

# Register DataContainer in _ala:
_ala.DataContainer_swigregister(DataContainer)

class PETImageData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ala.delete_PETImageData

# Register PETImageData in _ala:
_ala.PETImageData_swigregister(PETImageData)

GRAB = _ala.GRAB
class SIRFUtilities(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def milliseconds():
        return _ala.SIRFUtilities_milliseconds()

    @staticmethod
    def scratch_file_name():
        return _ala.SIRFUtilities_scratch_file_name()

    def __init__(self):
        _ala.SIRFUtilities_swiginit(self, _ala.new_SIRFUtilities())
    __swig_destroy__ = _ala.delete_SIRFUtilities

# Register SIRFUtilities in _ala:
_ala.SIRFUtilities_swigregister(SIRFUtilities)

def SIRFUtilities_milliseconds():
    return _ala.SIRFUtilities_milliseconds()

def SIRFUtilities_scratch_file_name():
    return _ala.SIRFUtilities_scratch_file_name()

class ProjDataFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ala.ProjDataFile_swiginit(self, _ala.new_ProjDataFile(*args))
    __swig_destroy__ = _ala.delete_ProjDataFile

    def sino_stream_sptr(self):
        return _ala.ProjDataFile_sino_stream_sptr(self)

    def close_stream(self):
        return _ala.ProjDataFile_close_stream(self)

    def clear_stream(self):
        return _ala.ProjDataFile_clear_stream(self)

# Register ProjDataFile in _ala:
_ala.ProjDataFile_swigregister(ProjDataFile)

class STIRImageData(PETImageData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ala.STIRImageData_swiginit(self, _ala.new_STIRImageData(*args))

    def same_image_data(self):
        return _ala.STIRImageData_same_image_data(self)

    def new_image_data(self):
        return _ala.STIRImageData_new_image_data(self)

    def new_data_container_handle(self):
        return _ala.STIRImageData_new_data_container_handle(self)

    def is_complex(self):
        return _ala.STIRImageData_is_complex(self)

    def items(self):
        return _ala.STIRImageData_items(self)

    def write(self, *args):
        return _ala.STIRImageData_write(self, *args)

    def norm(self):
        return _ala.STIRImageData_norm(self)

    def multiply(self, x, y):
        return _ala.STIRImageData_multiply(self, x, y)

    def divide(self, x, y):
        return _ala.STIRImageData_divide(self, x, y)

    def maximum(self, x, y):
        return _ala.STIRImageData_maximum(self, x, y)

    def minimum(self, x, y):
        return _ala.STIRImageData_minimum(self, x, y)

    def data(self, *args):
        return _ala.STIRImageData_data(self, *args)

    def data_ptr(self, *args):
        return _ala.STIRImageData_data_ptr(self, *args)

    def data_sptr(self, *args):
        return _ala.STIRImageData_data_sptr(self, *args)

    def set_data_sptr(self, sptr_data):
        return _ala.STIRImageData_set_data_sptr(self, sptr_data)

    def fill(self, v):
        return _ala.STIRImageData_fill(self, v)

    def scale(self, s):
        return _ala.STIRImageData_scale(self, s)

    def dot(self, *args):
        return _ala.STIRImageData_dot(self, *args)

    def axpby(self, *args):
        return _ala.STIRImageData_axpby(self, *args)

    def xapyb(self, *args):
        return _ala.STIRImageData_xapyb(self, *args)

    def dimensions(self):
        return _ala.STIRImageData_dimensions(self)

    def get_dimensions(self, dim):
        return _ala.STIRImageData_get_dimensions(self, dim)

    def get_voxel_sizes(self, vsizes):
        return _ala.STIRImageData_get_voxel_sizes(self, vsizes)

    def get_data(self, data):
        return _ala.STIRImageData_get_data(self, data)

    def set_data(self, data):
        return _ala.STIRImageData_set_data(self, data)

    def begin(self, *args):
        return _ala.STIRImageData_begin(self, *args)

    def end(self, *args):
        return _ala.STIRImageData_end(self, *args)

    def move_to_scanner_centre(self, arg2):
        return _ala.STIRImageData_move_to_scanner_centre(self, arg2)

    def set_up_geom_info(self):
        return _ala.STIRImageData_set_up_geom_info(self)
    __swig_destroy__ = _ala.delete_STIRImageData

# Register STIRImageData in _ala:
_ala.STIRImageData_swigregister(STIRImageData)

class MathClass(DataContainer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    a = property(_ala.MathClass_a_get, _ala.MathClass_a_set)

    def items(self):
        return _ala.MathClass_items(self)

    def multiply(self, x, y):
        return _ala.MathClass_multiply(self, x, y)

    def divide(self, x, y):
        return _ala.MathClass_divide(self, x, y)

    def maximum(self, x, y):
        return _ala.MathClass_maximum(self, x, y)

    def minimum(self, x, y):
        return _ala.MathClass_minimum(self, x, y)
    __swig_destroy__ = _ala.delete_MathClass

# Register MathClass in _ala:
_ala.MathClass_swigregister(MathClass)



